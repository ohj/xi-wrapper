XI wrapper
==========

A wrapper script for Xilinx ISE[1].


Why
---

The reason for the scripts existence is twofold. One reason is to avoid
having all the crap usually found in Xilinx' bin directory in $PATH,
and $LD_RELOAD/$LD_LIBRARY_PATH filled with incompatible libs. The second
reason is to make it easier having multiple parallel installs of Xilinx
ISE and switch between them.


Installation
------------

The Makefile supports the usual GNU standard variables. It must
be installed in the same base directory as Xilinx ISE, since it
expects to find the different versions of ISE installed under
$prefix/$XILINX_VERSION. If you have e.g. ISE 12.4 installed in
/opt/xilinx/12.4. To install the wrapper scripts, you would do:

$ make prefix=/opt/xilinx sysconfdir=/etc

# make prefix=/opt/xilinx sysconfdir=/etc install

This will also create symbolic links for the really basic tools used in
a FPGA design flow. You probably need more symbolic links for your own
design flow. Perhaps symbolic links for more commands should be installed
by default?

Adding support for more commands found in the Xilinx ISE installation
is easy.  Simply create a symbolic link, named the same as the command
found in Xilinx' bin directory, to this wrapper script. The wrapper can
either be used standalone or in conjunction with Environment Modules[2].


Usage
-----

The wrapper works by having a symbolic link named the same as whatever
program you want to invoke, linked to the xi-wrapper script. The script
then sets up the environment as expected by the program, and invokes it.

E.g. to use the synthesis tool, xst, with this script. First create a
symbolic link named xst to xi-wrapper.

$ ln -s $bindir/xi-wrapper xst

You can now easily change both which version of xst is invoked, if you
have multiple installs in parallel, and which architecture build of the
tool is used (64- or 32-bit).

Invoke a specific version:

$ XI_WRAPPER_VERSION="12.1" xst

Use 32-bit synthesis tool on 64-bit machine:

$ XI_WRAPPER_ARCH="i686" xst

As a special feature, if xi-wrapper is invoked as xi-wrapper, is will
setup the Xilinx environment and execute $SHELL. This means you can easily
invoke commands using the shell without having to make a symbolic link
for them.


Hooks
-----

In certain versions, some of the tools behave erratically. E.g. in version
13.2 trce tends to segmentation fault after finishing STA. The report is
fine, since STA was done before the segmentation fault, but make fails
since exit code is 139. To work around this, a system for inserting pre-
and post-execution hooks is implemented. E.g. to work around the bug
mentioned, create $datadir/xi-wrapper/hooks.d/trce-13.2-post-exec.sh
containing

	if [ $ret -eq 139 ] ; then
		ret=0
	fi

The naming rules for the hooks are $tool-$version-$type.sh. Where $tool
is the name of the invoked command, $version is the Xilinx ISE installation
version, and $type can be one of the following:

pre-xienv	Hooks executed before the Xilinx environment is loaded.
post-xienv	Hooks executed after the Xilinx environment is loaded.
pre-exec	Hooks executed before the command is invoked.
post-exec	Hooks executed after the command is invoked.

The $type values are listed in the order they are executed. A special
$tool value 'all' also exists. This special value is executed for all
possible values of $tool invoked.


Environment Modules
-------------------

Included is also two modulefiles intended to be used with the Environment
Modules package[2]. The libusb modulefile works on most setups using
newer versions Xilinx ISE over USB. When the libusb approach does not
work or when using parallel cable, the usb-driver modulefile together
with usb-driver[3] can be used instead.

E.g. if you have /etc/modulefiles setup as a modulefile directory. You
can create the folder /etc/modulefiles/xi-wrapper and put the usb-driver
and libusb modulefiles in there. This lets you access the two setups as
different versions of the xi-wrapper module.


Filtering
---------

The scripts also supports filtering standard output of the command
invoked, and only having INFO, WARNING, and ERROR messages printed. This
makes it easier to use the tool in a build environment like GNU make[4],
without standard output being overloaded with output.

The filtering is activated by exporting the environment variable
XI_WRAPPER_FILTERED set to '1'. Filtering is only activated for
commands that are known to produce output that is compatible with the
AWK filter. The filtering can be overridden by pre-exec hooks, by setting
the filter_cond variable to '1' or '0', to turn filtering off or on for
the command, respectively.


[1] http://www.xilinx.com/products/design-tools/
[2] http://modules.sourceforge.net/
[3] http://rmdir.de/~michael/xilinx/
[4] https://www.gnu.org/software/make/
