#!/usr/bin/env bash
# Xilinx ISE command line tools wrapper script
# Copyright (C) 2010-2012 Ole Henrik Jahren <olehenja@alumni.ntnu.no>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Reminder where to look for programs if any are missing:
# $XI_WRAPPER_PREFIX/$XI_WRAPPER_VERSION/ISE_DS/common/bin/lin64
# $XI_WRAPPER_PREFIX/$XI_WRAPPER_VERSION/ISE_DS/PlanAhead/bin
# $XI_WRAPPER_PREFIX/$XI_WRAPPER_VERSION/ISE_DS/ISE/bin/lin64
# $XI_WRAPPER_PREFIX/$XI_WRAPPER_VERSION/ISE_DS/ISE/sysgen/util
# $XI_WRAPPER_PREFIX/$XI_WRAPPER_VERSION/ISE_DS/EDK/bin/lin64

prog="`basename "$0"`"

die()
{
	echo "$@" >&2
	exit 1
}

should_filter()
{
	local ret=1
	local prog="$1"

	if [ "$#" -ne 1 ] ; then
		echo "usage: $0 <prog>" 1>&2
		die "$prog: error: missing argument to function '$0'"
	fi

	case "$prog" in
	map)
		ret=0 ;;
	netgen)
		ret=0 ;;
	ngdbuild)
		ret=0 ;;
	par)
		ret=0 ;;
	trce)
		ret=0 ;;
	xst)
		ret=0 ;;
	esac

	return "$ret"
}

source_hook()
{
	local hook_file="$hook_dir/$1-$2.sh"
	if [ "$#" -ne 2 ] ; then
		echo "usage: $0 <tool-name> <hook-name>"
		die "$prog: error: missing argument to function '$0'"
	fi
	if [ -f "$hook_file" -a -x "$hook_file" ] ; then
		. "$hook_file" || \
			die "$prog: error when sourcing '$2' hook file '$hook_file'"
	fi
}

if [ -n "$XI_WRAPPER_RECURSIVE" ] ; then
	die "$prog: error: recursive loop detected"
fi

if [ -z "$XI_WRAPPER_PREFIX" ] ; then
	# Change this to where you installed ISE. E.g.
	# prefix="/opt/xilinx"
	prefix="@prefix@"
else
	prefix="$XI_WRAPPER_PREFIX"
fi

if [ ! -d "$prefix" ] ; then
	die "$prog: error: '$prefix' does not seem to be a valid prefix"
fi

if [ -z "$XI_WRAPPER_BINDIR" ] ; then
	bindir="@bindir@"
else
	bindir="$XI_WRAPPER_BINDIR"
fi

if [ ! -d "$bindir" ] ; then
	die "$prog: error: '$bindir' does not seem to be a valid bindir"
fi

if [ -z "$XI_WRAPPER_DATADIR" ] ; then
	datadir="@datadir@"
else
	datadir="$XI_WRAPPER_DATADIR"
fi

if [ ! -d "$datadir" ] ; then
	die "$prog: error: '$datadir' does not seem to be a valid datadir"
fi

hook_dir="$datadir/xi-wrapper/hooks.d"

if [ -z "$XI_WRAPPER_VERSION" ] ; then
	die -e "$prog: error: environment variable XI_WRAPPER_VERSION is unset,\n" \
		"    please set it to the version of ISE to use."
fi

version="$XI_WRAPPER_VERSION"

if [ ! -d "$prefix/$version" ] ; then
	die "$prog: error: '$prefix/$version' does not seem to be a valid version"
fi

if [ -n "$XI_WRAPPER_ARCH" ] ; then
	arch="$XI_WRAPPER_ARCH"
else
	arch="`uname -m`"
fi

if [ "$arch" = "x86_64" ] ; then
	bits="64"
elif echo "$arch" | grep -q '^i[3456]86$' ; then
	bits="32"
else
	die "$prog: error: unknown architecture '$arch' not supported"
fi

if [ -z "$LD_LIBRARY_PATH" ] ; then
	LD_LIBRARY_PATH="$prefix/lib$bits"
else
	LD_LIBRARY_PATH="$prefix/lib$bits:$LD_LIBRARY_PATH"
fi
export LD_LIBRARY_PATH

if [ -n "$XI_WRAPPER_LD_PRELOAD" ] ; then
	if [ -z "$LD_PRELOAD" ] ; then
		LD_PRELOAD="$XI_WRAPPER_LD_PRELOAD"
	else
		LD_PRELOAD="$LD_PRELOAD:$XI_WRAPPER_LD_PRELOAD"
	fi
	export LD_PRELOAD
fi

source_hook "all" pre-xienv
source_hook "all-$version" pre-xienv
source_hook "$prog-$version" pre-xienv

#save_ld_library_path="$LD_LIBRARY_PATH"
dir="$prefix/$version/ISE_DS"
script="$dir/settings$bits.sh"
if [ "$XI_WRAPPER_VERBOSE" = 1 ] ; then
	. "$script" "$dir" || \
		die "$prog: error while loading Xilinx environment"
else
	. "$script" "$dir" > /dev/null || \
		die "$prog: error while loading Xilinx environment"
fi
#export LD_LIBRARY_PATH="$save_ld_library_path"

source_hook "$prog-$version" post-xienv
source_hook "all-$version" pre-xienv
source_hook "all" pre-xienv

export XI_WRAPPER_RECURSIVE=1
# For debugging mostly
#export PATH="`echo "$PATH"|sed -e "s:$bindir::g"|tr -s ':'`"

should_filter "$prog"
filter_cond="$?"
filter_prog=awk
filter_expr='
	BEGIN {
		prevout = 0 ;
		out = 0 ;
	}
	/^(ERROR|WARNING|INFO)/ {
		out = 1 ;
	}
	/^   [^ ]/ {
		if (prevout == 1)
			out = 1 ;
		else
			out = 0 ;
	}
	{
		if (out != 0)
			print ;
		prevout = out ;
		out = 0 ;
	}'

source_hook "all" pre-exec
source_hook "all-$version" pre-exec
source_hook "$prog-$version" pre-exec

if [ "$XI_WRAPPER_FILTERED" = 1 -a "$filter_cond" = 0 ] ; then
	"$prog" "$@" | "$filter_prog" "$filter_expr"
	ret="${PIPESTATUS[0]}"
else
	if [ "$prog" = "xi-wrapper" ] ; then
		"${SHELL:-/bin/sh}" "$@"
		ret="$?"
	else
		"$prog" "$@"
		ret="$?"
	fi
fi

source_hook "$prog-$version" post-exec
source_hook "all-$version" post-exec
source_hook "all" post-exec

exit "$ret"
